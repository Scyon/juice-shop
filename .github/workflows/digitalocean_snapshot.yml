name: "CI/CD Pipeline"
on:
  push:
    branches-ignore:
      - l10n_develop
      - gh-pages
    paths-ignore:
      - '*.md'
      - 'LICENSE'
      - 'monitoring/grafana-dashboard.json'
      - 'screenshots/**'
    tags-ignore:
      - '*'
  pull_request:
    paths-ignore:
      - '*.md'
      - 'LICENSE'
      - 'data/static/i18n/*.json'
      - 'frontend/src/assets/i18n/*.json'
env:
  NODE_DEFAULT_VERSION: 20
  ANGULAR_CLI_VERSION: 17
  CYCLONEDX_NPM_VERSION: '^1.12.0'
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: "Check out Git repository"
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac
      - name: "Use Node.js 18"
        uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d
        with:
          node-version: ${{ env.NODE_DEFAULT_VERSION }}
      - name: "Install CLI tools"
        run: npm install -g @angular/cli@$ANGULAR_CLI_VERSION
      - name: "Install application minimalistically"
        run: |
          npm install --ignore-scripts
          cd frontend
          npm install --ignore-scripts --legacy-peer-deps
      - name: "Lint source code"
        run: npm run lint
      - name: "Lint customization configs"
        run: >
          npm run lint:config -- -f ./config/ctf.yml &&
          npm run lint:config -- -f ./config/default.yml

  coding-challenge-rsn:
    runs-on: windows-latest
    steps:
      - name: "Check out Git repository"
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac
      - name: "Use Node.js 18"
        uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d
        with:
          node-version: ${{ env.NODE_DEFAULT_VERSION }}
      - name: "Install CLI tools"
        run: npm install -g @angular/cli@$ANGULAR_CLI_VERSION
      - name: "Install application"
        run: npm install
      - name: "Check coding challenges for accidental code discrepancies"
        run: npm run rsn

  test:
    runs-on: ubuntu-latest
    steps:
      - name: "Check out Git repository"
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac
      - name: "Use Node.js 20"
        uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d
        with:
          node-version: 20
      - name: "Install CLI tools"
        run: npm install -g @angular/cli@$ANGULAR_CLI_VERSION
      - name: "Install application"
        run: npm install
      - name: "Execute unit tests"
        uses: nick-invision/retry@943e742917ac94714d2f408a0e8320f2d1fcafcd
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: npm test

  api-test:
    runs-on: ubuntu-latest
    steps:
      - name: "Check out Git repository"
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac
      - name: "Use Node.js 20"
        uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d
        with:
          node-version: 20
      - name: "Install CLI tools"
        run: npm install -g @angular/cli@$ANGULAR_CLI_VERSION
      - name: "Install application"
        run: npm install
      - name: "Execute integration tests"
        uses: nick-invision/retry@943e742917ac94714d2f408a0e8320f2d1fcafcd
        env:
          NODE_ENV: test
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: npm run frisby

  custom-config-test:
    runs-on: ubuntu-latest
    steps:
      - name: "Check out Git repository"
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac
      - name: "Use Node.js 18"
        uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d
        with:
          node-version: ${{ env.NODE_DEFAULT_VERSION }}
      - name: "Install CLI tools"
        run: npm install -g @angular/cli@$ANGULAR_CLI_VERSION
      - name: "Install application"
        run: npm install
      - name: "Execute server tests for each custom configuration"
        uses: nick-invision/retry@943e742917ac94714d2f408a0e8320f2d1fcafcd
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: >
            npm run test:server &&
            NODE_ENV=ctf npm run test:server

  smoke-test:
    runs-on: ubuntu-latest
    steps:
      - name: "Check out Git repository"
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac
      - name: "Use Node.js 18"
        uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d
        with:
          node-version: ${{ env.NODE_DEFAULT_VERSION }}
      - name: "Install CLI tools"
        run: |
          npm install -g @angular/cli@$ANGULAR_CLI_VERSION
          npm install -g @cyclonedx/cyclonedx-npm@$CYCLONEDX_NPM_VERSION
          npm install -g grunt-cli
      - name: "Set packaging options for Grunt"
        run: |
          echo "PCKG_OS_NAME=linux" >> $GITHUB_ENV
          echo "PCKG_NODE_VERSION=18" >> $GITHUB_ENV
          echo "PCKG_CPU_ARCH=x64" >> $GITHUB_ENV
      - name: "Package application"
        run: |
          npm install --production
          npm run package:ci
      - name: "Unpack application archive"
        run: |
          cd dist
          tar -zxf juice-shop-*.tgz
      - name: "Execute smoke test"
        run: |
          cd dist/juice-shop_*
          npm start &
          cd ../..
          chmod +x test/smoke/smoke-test.sh
          test/smoke/smoke-test.sh http://localhost:3000

  docker-test:
    runs-on: ubuntu-latest
    steps:
      - name: "Check out Git repository"
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac
      - name: "Execute smoke test on Docker"
        run: docker compose -f docker-compose.test.yml up --exit-code-from sut

  digitalocean:
    needs: [ test, api-test, custom-config-test, docker-test, lint, coding-challenge-rsn, smoke-test ]
    runs-on: ubuntu-latest
    steps:
      - name: "Check out Git repository"
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac

      - name: "Install doctl"
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: "Log in to DO Container Registry"
        run: doctl registry login --expiry-seconds 1200

      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226

      - name: "Build and push"
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            registry.digitalocean.com/scyon/juice-shop:snapshot
            registry.digitalocean.com/scyon/juice-shop:${{ github.sha }}
          build-args: |
            VCS_REF=${{ github.sha }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            CYCLONEDX_NPM_VERSION=${{ env.CYCLONEDX_NPM_VERSION }}